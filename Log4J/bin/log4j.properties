# 我们必须实例化  ConsoleAppender
# 01.实例化对象  ConsoleAppender   console =new ConsoleAppender(); 
# log4j.appender  前缀  我们一般不改变
log4j.appender.console=org.apache.log4j.ConsoleAppender
#02.我们想把错误的信息 打印 到 console台上

#ConsoleAppender 类中 有一个属性 叫  target
#console.setTarget(System.out)/setTarget(System.err)
log4j.appender.console.Target=System.out

#03.设置日志的输出格式  我们在ConsoleAppender类中找到了一个抽象类Layout
#抽象类Layout有很多实现类  我们使用PatternLayout可以灵活的设置日志的输出格式
#Layout  p=new PatternLayout();
log4j.appender.console.Layout=org.apache.log4j.PatternLayout
log4j.appender.console.Layout.ConversionPattern=%-5p %d{yyyy-MM-dd hh:mm:ss} %c %l %m %n


#把日志信息打印到 文件中01.就是一个文件  02.根据自己的需求按照时间间隔产生文件  03.根据文件的大小创建不同的文件
# 例子是 03

log4j.appender.file=org.apache.log4j.RollingFileAppender
#指定文件的输出地址   系统会默认创建
log4j.appender.file.File=e:/log/log4j.log
#指定编码格式
log4j.appender.file.Encoding=gbk
#设置每个文件的大小
log4j.appender.file.MaxFileSize=1kb
#设置是否覆盖
log4j.appender.file.Append=true
#产生额外的文件
log4j.appender.file.MaxBackupIndex=3
#设置日志的输出格式
log4j.appender.file.Layout=org.apache.log4j.PatternLayout
log4j.appender.file.Layout.ConversionPattern=[%-5p] [%d{yyyy-MM-dd hh:mm:ss}] %c %l %m %n

#设置日志的输出 级别 以及 输出地点（可以有多个） 级别 必须位于第一位
#log4j.rootLogger=trace,console,file
#只想输出指定包下面的日志信息
log4j.logger.cn.bdqn.util=trace,console,file
log4j.logger.cn.bdqn.test=trace,console,file


